'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

Object.defineProperty(exports, '__esModule', {
    value: true
});
var amqp = require('amqplib');
var _ = require('lodash');
var util = require('util');

var log = undefined;

var Subscriber = (function () {
    function Subscriber(options, logOptions) {
        if (options === undefined) options = {};

        _classCallCheck(this, Subscriber);

        log = require('logfilename')(__filename, logOptions);
        if (!options.exchange) {
            throw new Error('exchange parameter missing in options');
        }
        if (!options.queueName) {
            throw new Error('queueName parameter missing in options');
        }
        this._queue;
        this._channel;
        this._options = _.defaults(options, {
            type: 'topic',
            url: 'amqp://localhost'
        });
        log.info('Subscriber options:', util.inspect(this._options));
    }

    _createClass(Subscriber, [{
        key: 'start',
        value: function start(onIncomingMessage) {
            var options, connection, result, routingKeys, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, routingKey;

            return _regeneratorRuntime.async(function start$(context$2$0) {
                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        log.info('start');

                        options = this._options;
                        context$2$0.next = 4;
                        return _regeneratorRuntime.awrap(amqp.connect(options.url));

                    case 4:
                        connection = context$2$0.sent;

                        log.info('createChannel');
                        context$2$0.next = 8;
                        return _regeneratorRuntime.awrap(connection.createChannel());

                    case 8:
                        this._channel = context$2$0.sent;

                        log.info('assertExchange ', options.exchange);
                        context$2$0.next = 12;
                        return _regeneratorRuntime.awrap(this._channel.assertExchange(options.exchange, options.type, { durable: true }));

                    case 12:
                        log.info('assertQueue name: ', options.queueName);
                        context$2$0.next = 15;
                        return _regeneratorRuntime.awrap(this._channel.assertQueue(options.queueName, { exclusive: false }));

                    case 15:
                        result = context$2$0.sent;

                        this._queue = result.queue;
                        routingKeys = options.routingKeys || [options.queueName];

                        log.info('assertQueue keys ', routingKeys);
                        _iteratorNormalCompletion = true;
                        _didIteratorError = false;
                        _iteratorError = undefined;
                        context$2$0.prev = 22;
                        _iterator = _getIterator(routingKeys);

                    case 24:
                        if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                            context$2$0.next = 32;
                            break;
                        }

                        routingKey = _step.value;

                        log.info('bindQueue routingKey ', routingKey);
                        context$2$0.next = 29;
                        return _regeneratorRuntime.awrap(this._channel.bindQueue(this._queue, options.exchange, routingKey));

                    case 29:
                        _iteratorNormalCompletion = true;
                        context$2$0.next = 24;
                        break;

                    case 32:
                        context$2$0.next = 38;
                        break;

                    case 34:
                        context$2$0.prev = 34;
                        context$2$0.t0 = context$2$0['catch'](22);
                        _didIteratorError = true;
                        _iteratorError = context$2$0.t0;

                    case 38:
                        context$2$0.prev = 38;
                        context$2$0.prev = 39;

                        if (!_iteratorNormalCompletion && _iterator['return']) {
                            _iterator['return']();
                        }

                    case 41:
                        context$2$0.prev = 41;

                        if (!_didIteratorError) {
                            context$2$0.next = 44;
                            break;
                        }

                        throw _iteratorError;

                    case 44:
                        return context$2$0.finish(41);

                    case 45:
                        return context$2$0.finish(38);

                    case 46:

                        log.info('prefetch and consume');
                        this._channel.prefetch(1);
                        context$2$0.next = 50;
                        return _regeneratorRuntime.awrap(this._channel.consume(this._queue, onIncomingMessage.bind(this)));

                    case 50:
                        log.info('started');

                    case 51:
                    case 'end':
                        return context$2$0.stop();
                }
            }, null, this, [[22, 34, 38, 46], [39,, 41, 45]]);
        }
    }, {
        key: 'stop',
        value: function stop() {
            return _regeneratorRuntime.async(function stop$(context$2$0) {
                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        log.info('stop');

                        if (!this._channel) {
                            context$2$0.next = 7;
                            break;
                        }

                        context$2$0.next = 4;
                        return _regeneratorRuntime.awrap(this._channel.close());

                    case 4:
                        return context$2$0.abrupt('return', context$2$0.sent);

                    case 7:
                        log.warn('stopping but channel was not opened');

                    case 8:
                    case 'end':
                        return context$2$0.stop();
                }
            }, null, this);
        }
    }, {
        key: 'ack',
        value: function ack(message) {
            log.debug('ack');
            this._channel.ack(message);
        }
    }, {
        key: 'nack',
        value: function nack(message) {
            log.debug('nack');
            this._channel.nack(message);
        }
    }, {
        key: 'purgeQueue',
        value: function purgeQueue() {
            return _regeneratorRuntime.async(function purgeQueue$(context$2$0) {
                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        log.info('purgeQueue ', this._queue);

                        if (!this._channel) {
                            context$2$0.next = 7;
                            break;
                        }

                        context$2$0.next = 4;
                        return _regeneratorRuntime.awrap(this._channel.purgeQueue(this._queue));

                    case 4:
                        return context$2$0.abrupt('return', context$2$0.sent);

                    case 7:
                        log.warn('purgeQueue: channel not opened');

                    case 8:
                    case 'end':
                        return context$2$0.stop();
                }
            }, null, this);
        }
    }]);

    return Subscriber;
})();

exports['default'] = Subscriber;
module.exports = exports['default'];