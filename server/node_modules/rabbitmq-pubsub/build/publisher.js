'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

Object.defineProperty(exports, '__esModule', {
    value: true
});
var Promise = require('bluebird');
var amqp = require('amqplib');
var _ = require('lodash');
var util = require('util');

var log = undefined;

var Publisher = (function () {
    function Publisher(options, logOptions) {
        if (options === undefined) options = {};

        _classCallCheck(this, Publisher);

        log = require('logfilename')(__filename, logOptions);
        if (!options.exchange) {
            throw new Error('exchange parameter missing in options');
        }
        this._options = _.defaults(options, {
            type: 'topic',
            url: 'amqp://localhost'
        });
        log.info('Publisher options:', util.inspect(this._options));
    }

    _createClass(Publisher, [{
        key: 'start',
        value: function start() {
            var options, connection, res;
            return _regeneratorRuntime.async(function start$(context$2$0) {
                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        options = this._options;

                        log.info('start ', util.inspect(options));
                        context$2$0.next = 4;
                        return _regeneratorRuntime.awrap(amqp.connect(options.url));

                    case 4:
                        connection = context$2$0.sent;

                        log.info('connected to mq');
                        context$2$0.next = 8;
                        return _regeneratorRuntime.awrap(connection.createChannel());

                    case 8:
                        this._channel = context$2$0.sent;

                        log.info('connected to channel');
                        context$2$0.next = 12;
                        return _regeneratorRuntime.awrap(this._channel.assertExchange(options.exchange, options.type, { durable: true }));

                    case 12:
                        res = context$2$0.sent;

                        log.info('connected ', res);

                    case 14:
                    case 'end':
                        return context$2$0.stop();
                }
            }, null, this);
        }
    }, {
        key: 'stop',
        value: function stop() {
            return _regeneratorRuntime.async(function stop$(context$2$0) {
                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        log.info('stop');

                        if (!this._channel) {
                            context$2$0.next = 7;
                            break;
                        }

                        context$2$0.next = 4;
                        return _regeneratorRuntime.awrap(this._channel.close());

                    case 4:
                        return context$2$0.abrupt('return', context$2$0.sent);

                    case 7:
                        return context$2$0.abrupt('return', Promise.resolve());

                    case 8:
                    case 'end':
                        return context$2$0.stop();
                }
            }, null, this);
        }
    }, {
        key: 'publish',
        value: function publish(key, message) {
            return _regeneratorRuntime.async(function publish$(context$2$0) {
                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        log.info('publish exchange:%s, key:%s, message ', this._options.exchange, key, message);
                        return context$2$0.abrupt('return', this._channel.publish(this._options.exchange, key, new Buffer(message)));

                    case 2:
                    case 'end':
                        return context$2$0.stop();
                }
            }, null, this);
        }
    }]);

    return Publisher;
})();

exports['default'] = Publisher;
module.exports = exports['default'];