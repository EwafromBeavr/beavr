/*
 * Copyright (c) 2015 TechnologyAdvice
 */
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _output = require('./output');

var _output2 = _interopRequireDefault(_output);

var _dgram = require('dgram');

var _dgram2 = _interopRequireDefault(_dgram);

var _net = require('net');

var _net2 = _interopRequireDefault(_net);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var forwarders = {
  /**
   * Enables TCP connection and UDP packet forwarding to a remote host.
   * @param {string} host The hostname or IP address of the remote server
   * @param {number} localPort The port on which to listen for local connections
   * @param {number} [remotePort=localPort] The port to which traffic should be forwarded on the host. If omitted,
   *    localPort is used.
   * @return {Promise} Resolves when the given localPort is successfully listening for both TCP and UDP.
   */
  startForwarder: function startForwarder(host, localPort) {
    var remotePort = arguments.length <= 2 || arguments[2] === undefined ? localPort : arguments[2];
    return (function () {
      return _bluebird2['default'].all([forwarders.startTcpForwarder(host, localPort, remotePort), forwarders.startUdpForwarder(host, localPort, remotePort)]);
    })();
  },

  /**
   * Starts a forwarder for each given port on the local machine to the same ports on the remote machine.
   * @param {string} host The hostname of the machine to which the ports should be forwarded.
   * @param {Array<number>} ports An array of port numbers to forward
   * @return {Promise} Resolves when all given ports are listening locally.
   */
  startForwarders: function startForwarders(host, ports) {
    var promises = ports.map(function (port) {
      return forwarders.startForwarder(host, port);
    });
    return _bluebird2['default'].all(promises);
  },

  /**
   * Opens a TCP server socket on the given port, proxying it to the specified port at the given host
   * when a connection is established.
   * @param {string} host The hostname or IP address of the remote server
   * @param {number} localPort The port on which to listen for local connections
   * @param {number} [remotePort=localPort] The port to which traffic should be forwarded on the host.
   *    If omitted, localPort is used.
   * @return {Promise} Resolves when the given localPort is successfully listening.
   */
  startTcpForwarder: function startTcpForwarder(host, localPort) {
    var remotePort = arguments.length <= 2 || arguments[2] === undefined ? localPort : arguments[2];
    return (function () {
      var server = _net2['default'].createServer(function (localConn) {
        var remoteConn = _net2['default'].connect(remotePort, host);
        remoteConn.on('connect', function () {
          localConn.pipe(remoteConn);
          remoteConn.pipe(localConn);
        });
        remoteConn.on('error', function (err) {
          _output2['default'].error(err.message);
          localConn.end();
        });
      });
      _output2['default'].success('Forwarding {{localhost:' + localPort + '}} to {{' + host + ':' + remotePort + '}} over TCP');
      forwarders._servers.push(server);
      return new _bluebird2['default'](function (resolve, reject) {
        server.on('error', function (err) {
          return reject(err);
        });
        server.listen(localPort, resolve);
      });
    })();
  },

  /**
   * Opens a UDP listening socket on the given port, proxying any messages it receives to the specified
   * port at the given host.
   * @param {string} host The hostname or IP address of the remote server
   * @param {number} localPort The port on which to listen for local connections
   * @param {number} [remotePort=localPort] The port to which traffic should be forwarded on the host.
   *    If omitted, localPort is used.
   * @param {string} [type='udp4'] The UDP message type to support
   * @return {Promise} Resolves when the given localPort is successfully listening.
   */
  startUdpForwarder: function startUdpForwarder(host, localPort) {
    var remotePort = arguments.length <= 2 || arguments[2] === undefined ? localPort : arguments[2];
    var type = arguments.length <= 3 || arguments[3] === undefined ? 'udp4' : arguments[3];
    return (function () {
      var socket = _dgram2['default'].createSocket(type);
      socket.on('message', function (msg) {
        socket.send(msg, 0, msg.length, remotePort, host);
      });
      forwarders._servers.push(socket);
      _output2['default'].success('Forwarding {{localhost:' + localPort + '}} to {{' + host + ':' + remotePort + '}} over UDP');
      return new _bluebird2['default'](function (resolve, reject) {
        try {
          socket.bind(localPort);
        } catch (e) {
          reject(e);
        }
        resolve();
      });
    })();
  },

  /**
   * Stops any active forwarders. If no forwarders are active, this does nothing.
   */
  stopForwarders: function stopForwarders() {
    if (forwarders._servers.length) {
      _output2['default'].success('Halting all port forwarding');
      forwarders._servers.forEach(function (server) {
        server.unref();
        server.close();
      });
      forwarders._servers = [];
    }
  },

  /**
   * An array of server sockets
   */
  _servers: []
};

exports['default'] = forwarders;
module.exports = exports['default'];