'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
var request = require('request');
var Promise = require('bluebird');
var _ = require('lodash');
var log = undefined;

var Client = (function () {
  function Client(config, logOptions) {
    if (config === undefined) config = {};

    _classCallCheck(this, Client);

    log = require('logfilename')(__filename, logOptions);
    this.config = config;
    this.url = this.config.url || 'http://localhost:3000/api/';
  }

  _createClass(Client, [{
    key: '_ops',
    value: function _ops(ops, action, resCodes, param) {
      log.debug(ops + ' ' + action + ' with %s to ', param ? JSON.stringify(param) : "no param", this.url);
      var me = this;
      var data = updateRequestWithKey(this, {});
      if (param) {
        data.json = param;
      }
      data.method = ops;
      var requestFn = Promise.promisify(request);
      return requestFn(this.url + action, data).spread(function (res, body) {
        log.debug("headers ", JSON.stringify(res.headers));
        var cookiesIn = res.headers['set-cookie'];
        if (cookiesIn) {
          me.cookies = _.map(cookiesIn, function (cookie) {
            //console.log("cookie:" + cookie);
            return request.cookie(cookie);
          });
        }
        console.log("me.cookies:", me.cookies);

        if (resCodes.indexOf(res.statusCode) == -1) {
          throw res;
        } else {
          return body;
        }
      });
    }
  }, {
    key: 'get',
    value: function get(action, param) {
      return this._ops("GET", action, [200], param);
    }
  }, {
    key: 'patch',
    value: function patch(action, param) {
      return this._ops("PATCH", action, [200, 204], param);
    }
  }, {
    key: 'put',
    value: function put(action, param) {
      return this._ops("PUT", action, [200, 204], param);
    }
  }, {
    key: 'delete',
    value: function _delete(action, param) {
      return this._ops("DELETE", action, [204], param);
    }
  }, {
    key: 'post',
    value: function post(action, param) {
      return this._ops("POST", action, [200, 201, 204], param);
    }
  }, {
    key: 'login',
    value: function login(param) {
      var paramDefault = {
        email: this.config.email,
        username: this.config.username,
        password: this.config.password
      };

      return this.post('v1/auth/login', param || paramDefault);
    }
  }]);

  return Client;
})();

exports['default'] = Client;

function updateRequestWithKey(client, data) {
  data.json = {};
  if (client.cookies) {
    (function () {
      var jar = request.jar();
      jar._jar.rejectPublicSuffixes = false;
      _.each(client.cookies, function (cookie) {
        console.log("cookie:" + cookie);
        jar.setCookie(cookie, client.url);
      });

      data.jar = jar;
    })();
  }
  return data;
}
module.exports = exports['default'];